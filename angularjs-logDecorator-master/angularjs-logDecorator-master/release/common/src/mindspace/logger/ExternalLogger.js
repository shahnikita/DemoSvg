// Generated by uRequire v0.6.14 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

"use strict";
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('mindspace/logger/ExternalLogger', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('./LogEnhancer'), nr.require('../utils/BrowserDetect'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', './LogEnhancer', '../utils/BrowserDetect'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, LogEnhancer, BrowserDetect) {
  

var prepareLogToConsole = function (method) {
      var console = window.console, isFunction = function (fn) {
          return typeof fn == typeof Function;
        }, isAvailableConsoleFor = function (method) {
          return console && console[method] && isFunction(console[method]);
        }, logFn = function (message) {
          if (isAvailableConsoleFor(method)) {
            try {
              console[method](message);
            } catch (e) {
            }
          }
        };
      return logFn;
    }, $log = {
      log: prepareLogToConsole("log"),
      info: prepareLogToConsole("info"),
      warn: prepareLogToConsole("warn"),
      debug: prepareLogToConsole("debug"),
      error: prepareLogToConsole("error")
    };
  return new LogEnhancer($log);


})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))